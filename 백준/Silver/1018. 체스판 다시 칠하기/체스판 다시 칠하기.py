# 행 길이, 열 길이 8~50
N, M = map(int, input().split())
board = [list(input()) for _ in range(N)]

# 찾아야 하는 패턴은 2종류다
pattern_BW = ["B","W"]*4
pattern_WB = ["W","B"]*4
board_BW = [pattern_BW if i % 2 == 0 else pattern_WB for i in range(8) ]
board_WB = [pattern_WB if i % 2 == 0 else pattern_BW for i in range(8) ]


min_cnt = 64
for i in range(N-7):
    for j in range(M-7):
        diff_BW = 0
        diff_WB = 0
        # 주어진 전체 보드를 체스 보드 크기로 잘라서 패턴과 얼마나 불일치 하는지 비교
        for r in range(i,i+8):
            for c in range(j,j+8):
                if board[r][c] != board_BW[r-i][c-j]:
                    diff_BW += 1
                if board[r][c] != board_WB[r-i][c-j]:
                    diff_WB += 1
        if min_cnt > diff_BW:
            min_cnt = diff_BW
        if min_cnt > diff_WB:
            min_cnt = diff_WB
print(min_cnt)

'''
반성
    a) 최근 목표 미달성
        문제를 보고 풀이가 생각이 난다면 풀이에 대해 주어진 테스트 케이스 혹은
        직접 테스트 케이스를 만들어 적용시켜보고 해당 풀이에 허점이 없는지 파악하고
        코드를 짜는 순서를 지킬 것.    
        
    b) 문제 접근법 오류
        제일 먼저 생각난 풀이의 경우 전체 패턴이 아닌 일부의 패턴을 파악하려고 했으므로
        윗줄과 아랫줄이 같은 패턴인 경우를 고려할 수 없었음
        완전 탐색이 필요하다고 판단한 경우 놓치는 경우가 없도록 탐색 방법을 정할 것
        다만 불필요한 탐색을 지속할 필요는 없으므로 문제의 조건을 판단하고 필요할 시
        가지치기(이번 문제의 경우 완전 일치하는 경우를 찾을 경우 반환하는 형태 가능할듯)
                
    c) 리스트와 for문 사용 미숙
        리스트의 범위를 for문으로 접근할 때 짝수 케이스 홀수 케이스에 대해 구분하여 
        생각하지 않고 코드를 작성 후 정답이 맞지 않은 후 해당 사항을 확인하여 조치
        전체 범위에 대해 탐색하는 것이 아닌 경우는 (for i in range(n, m ,2)등) 
        특히 결과가 익숙하지 않으므로 코드를 작성할 때 i의 변화를 생각하고 
        i의 변화에 따른 변수에 저장된 자료 변화 등이 어떻게 변화할지 고려하고 다음으로 넘어갈 것

배울 점
    a) 테스트 케이스
        
        리스트 탐색을 뛰어 넘으면서 할 경우 홀수 경우, 짝수 경우가 다를 수 있음을 기억하기
        (별로 안 하는게 나을지도...)
        리스트 범위를 지정할 때 실수하기 쉽기 때문에 배열의 길이가 i,j라면 i-1,j-1자리에
        찾아야 하는 경우를 넣어보기
        문제에서 제시하는 상황에 부합하는 케이스를 다양하게 생각해보고 현재 구상중인 코드가
        해당 케이스를 처리할 수 있는지 먼저 따져보기
        테스트 케이스가 충분하다면 테스트 케이스를 보고 문제를 파악해도 좋지만 그렇지 않다면
        반드시 테스트 케이스를 만들어보기 
        
        
시간 관리

        평소에 코드 작성 전에 문제, 테스트 케이스 파악과 테스트 케이스 생각해보는 걸 먼저 선행해보면서
        필요한 시간을 조절할 것. im수준이라면 코드를 작성하면서 풀이 방법을 수정해도 시간이 부족하지는 
        않지만 비효율적.
        
        
'''
